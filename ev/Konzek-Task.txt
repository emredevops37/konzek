önce aws konsolde bir amazon linux 2023 makine ayağa kaldıralım.
burada hem makineye ssh ile bağlanmak hemde kendi uygulamamızı görebilmek için security grup ayarlarından 22 ve 8080 portlarını açık olmasını unutmayalım

sonra makineye ssh ile bağlandık.
projeyi yazmak için "konzek" adında bir folder oluşturup içine geçelim.

```
mkdir konzek && cd konzek
```

python yüklü olmadığı için önce makineye python yükleyelim.

```
sudo dnf update -y
sudo dnf install python3 -y
python3 --version
```
çıktı ---> Python 3.9.20

app.py dosyasını oluşturduk

```
from http.server import SimpleHTTPRequestHandler, HTTPServer

host = "0.0.0.0"
port = 8080

class CustomHandler(SimpleHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"Hello, World!")

if __name__ == "__main__":
    with HTTPServer((host, port), CustomHandler) as server:
        print(f"Server running on {host}:{port}")
        server.serve_forever()
```

8080 portundan "Hello, World!" yazan bir sayfa gösteren basit bir kod yazdık.
uygulamayı çalıştırıp denedik,

```
python3 app.py
ps aux | grep python
```
çıktı
ec2-user    3681  0.0  0.2 222316  2052 pts/1    S+   19:58   0:00 grep --color=auto python

systemd unit dosyası yazalım.
Uygulamanın bir systemd servisi olarak çalışması için bir ".service" dosyası oluşturalım.

```
# /etc/systemd/system/myapp.service
[Unit]
Description=My Simple Python HTTP Server
After=network.target

[Service]
ExecStart=/usr/bin/python3 /home/ec2-user/konzek/app.py
WorkingDirectory=/home/ec2-user/konzek
Restart=always
StandardOutput=file:/var/log/myapp.log
StandardError=file:/var/log/myapp_error.log

[Install]
WantedBy=multi-user.target
```
Servisi etkinleştirip ve başlatalım;

```
sudo systemctl daemon-reload
sudo systemctl enable myapp.service
sudo systemctl start myapp.service
```

servisin durumunu kontrol edelim,

```
sudo systemctl status myapp.service
```
ve "http://<server_ip>:8080" adresinden uygulamanın çalıştığını doğrulayalım.

çalıştığını gördüysek docker ile servis etmeye geçmeden 8080 de çakışma olmaması için durduralım  
```
sudo systemctl stop myapp.service
```


2. AŞAMAYA GEÇELİM
Server'a docker yükleyelim
```
sudo yum update -y
sudo yum install docker -y

sudo systemctl start docker
sudo systemctl enable docker

sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

docker --version
docker-compose --version
```
docker ve docker-compose yükledik

Dockerfile oluşturalım

```
FROM python:3.9-slim

WORKDIR /app

COPY app.py .

CMD ["python", "app.py"]
```
compose file oluşturalım
docker-compose.yml
```
version: '3.8'

services:
  app:
    image: myapp:latest
    build:
      context: .
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    networks:
      - app-network

  reverse-proxy:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
```

nginx.conf dosyası oluşturalım
```
events {}

http {
  upstream app_servers {
    server app:8080; # Internal olarak 8080'den bağlanır
  }

  server {
    listen 80;

    location / {
      proxy_pass http://app_servers;
    }
  }
}
```

uygulamayı 80 portundan göreceğiz ancak her iki containerda load balance yaptığını test 
edebilmek için app.py uygulamamıza "hello world" yazısı ile beraber container hostname yazacak şekilde düzenleyelim,

```
from http.server import SimpleHTTPRequestHandler, HTTPServer
import socket

host = "0.0.0.0"
port = 8080

class CustomHandler(SimpleHTTPRequestHandler):
    def do_GET(self):
        hostname = socket.gethostname()  # Container'ın hostname'ini al
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(f"Hello, World from {hostname}!".encode())  # Yanıt mesajına hostname ekle

if __name__ == "__main__":
    with HTTPServer((host, port), CustomHandler) as server:
        print(f"Server running on {host}:{port}")
        server.serve_forever()
```

app.py güncelledik yeni build alalım

```
docker-compose build
docker-compose up -d
```
reverse proxy test edelim ;

```
curl http://localhost
```
Hello, World from 874663d5beb8! 
```
curl http://localhost
```
Hello, World from 0c452658dce4!

3 AŞAMA KUBERNETES DEPLOY























